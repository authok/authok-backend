// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.0
// source: tenant/tenant.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { NullValue } from "../google/protobuf/struct.pb";

export const protobufPackage = "tenant";

export interface DeleteTenantRequest {
  id: string;
}

export interface DeleteTenantReply {
  success: boolean;
}

export interface FindTenantByNameRequest {
  name: string;
}

export interface RetrieveTenantRequest {
  id: string;
}

export interface CreateTenantRequest {
  name: string;
  displayName: string;
  description: string;
  region: string;
  environment: string;
  jwtConfiguration: string;
}

export interface UpdateTenantRequest {
  id: string;
  name?: string | undefined;
  displayName?: string | undefined;
  domain?: string | undefined;
  description?: string | undefined;
  region?: string | undefined;
  environment?:
    | string
    | undefined;
  /** Record<string, any>; */
  changePassword?:
    | string
    | undefined;
  /** Record<string, any>; */
  deviceFlow?:
    | string
    | undefined;
  /** Record<string, any>; */
  guardianMfaPage?: string | undefined;
  defaultAudience?: string | undefined;
  defaultConnection?:
    | string
    | undefined;
  /** Record<string, any>; */
  errorPage?:
    | string
    | undefined;
  /** Record<string, boolean>; */
  flags?: string | undefined;
  picture?: string | undefined;
  supportEmail?: string | undefined;
  supportUrl?: string | undefined;
  allowedLogoutUrls: string[];
  sessionLifetime: number[];
  idleSessionLifetime: number[];
  sandboxVersion?: string | undefined;
  defaultRedirectionUri?: string | undefined;
  enabledLocales: string[];
  /** Record<string, any>; */
  sessionCookie?:
    | string
    | undefined;
  /** JwtConfiguration; */
  jwtConfiguration?:
    | string
    | undefined;
  /** Record<string, any>; */
  config?: string | undefined;
}

export interface Tenant {
  id: string;
  name: string;
  displayName: string;
  description: string;
  region: string;
  environment: string;
  jwtConfiguration: string;
}

export interface NullableTenant {
  null?: NullValue | undefined;
  tenant?: Tenant | undefined;
}

export interface ListTenantRequest {
  q: string;
  page: number;
  perPage: number;
  sort: string;
  includeTotals: boolean;
  includeFields: boolean;
}

export interface PageMeta {
  page: number;
  perPage: number;
  total: number;
}

export interface ListTenantReply {
  items: Tenant[];
  meta: PageMeta | undefined;
}

export const TENANT_PACKAGE_NAME = "tenant";

export interface TenantServiceClient {
  create(request: CreateTenantRequest): Observable<Tenant>;

  retrieve(request: RetrieveTenantRequest): Observable<Tenant>;

  update(request: UpdateTenantRequest): Observable<Tenant>;

  delete(request: DeleteTenantRequest): Observable<DeleteTenantReply>;

  findByName(request: FindTenantByNameRequest): Observable<Tenant>;

  list(request: ListTenantRequest): Observable<ListTenantReply>;
}

export interface TenantServiceController {
  create(request: CreateTenantRequest): Promise<Tenant> | Observable<Tenant> | Tenant;

  retrieve(request: RetrieveTenantRequest): Promise<Tenant> | Observable<Tenant> | Tenant;

  update(request: UpdateTenantRequest): Promise<Tenant> | Observable<Tenant> | Tenant;

  delete(request: DeleteTenantRequest): Promise<DeleteTenantReply> | Observable<DeleteTenantReply> | DeleteTenantReply;

  findByName(request: FindTenantByNameRequest): Promise<Tenant> | Observable<Tenant> | Tenant;

  list(request: ListTenantRequest): Promise<ListTenantReply> | Observable<ListTenantReply> | ListTenantReply;
}

export function TenantServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "retrieve", "update", "delete", "findByName", "list"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TenantService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TenantService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TENANT_SERVICE_NAME = "TenantService";
