// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.0
// source: marketplace/catalog.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "marketplace";

export interface DeleteCatalogRequest {
  id: string;
}

export interface DeleteCatalogReply {
  success: boolean;
}

export interface RetrieveCatalogRequest {
  id: string;
}

export interface CreateCatalogRequest {
}

export interface UpdateCatalogRequest {
  id: string;
}

export interface Catalog {
  id: string;
}

export interface ListCatalogRequest {
  q: string;
  page: number;
  pageSize: number;
  sort: string;
  includeTotals: boolean;
  includeFields: boolean;
}

export interface PageMeta {
  page: number;
  pageSize: number;
  total: number;
}

export interface ListCatalogReply {
  items: Catalog[];
  meta: PageMeta | undefined;
}

export const MARKETPLACE_PACKAGE_NAME = "marketplace";

export interface CatalogServiceClient {
  create(request: CreateCatalogRequest): Observable<Catalog>;

  retrieve(request: RetrieveCatalogRequest): Observable<Catalog>;

  update(request: UpdateCatalogRequest): Observable<Catalog>;

  delete(request: DeleteCatalogRequest): Observable<DeleteCatalogReply>;

  list(request: ListCatalogRequest): Observable<ListCatalogReply>;
}

export interface CatalogServiceController {
  create(request: CreateCatalogRequest): Promise<Catalog> | Observable<Catalog> | Catalog;

  retrieve(request: RetrieveCatalogRequest): Promise<Catalog> | Observable<Catalog> | Catalog;

  update(request: UpdateCatalogRequest): Promise<Catalog> | Observable<Catalog> | Catalog;

  delete(
    request: DeleteCatalogRequest,
  ): Promise<DeleteCatalogReply> | Observable<DeleteCatalogReply> | DeleteCatalogReply;

  list(request: ListCatalogRequest): Promise<ListCatalogReply> | Observable<ListCatalogReply> | ListCatalogReply;
}

export function CatalogServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "retrieve", "update", "delete", "list"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CatalogService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CatalogService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATALOG_SERVICE_NAME = "CatalogService";
